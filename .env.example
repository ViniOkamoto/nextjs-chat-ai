# Then get your OpenAI API Key here: https://platform.openai.com/account/api-keys
OPENAI_API_KEY=xxxxxxxxx

# Create a GitHub OAuth app here: https://github.com/settings/applications/new
# Authorization callback URL: https://authjs.dev/reference/core/providers_github#callback-url
AUTH_GITHUB_ID=xxxxxxxxx
AUTH_GITHUB_SECRET=xxxxxxxxxdev/guides/basics/deployment#securing-a-preview-deployment
# Set the following only when deployed. In this example, we can reuse the same OAuth app, but if you are storing users, we recommend using a different OAuth app for development/production so that you don't mix your test and production user base.
# AUTH_REDIRECT_PROXY_URL=https://YOURAPP.vercel.app/api/auth

# Instructions to create kv database here: https://vercel.com/docs/storage/vercel-kv/quickstart and 
KV_URL=xxxxxxxxx
KV_REST_API_URL=xxxxxxxxx
KV_REST_API_TOKEN=xxxxxxxxx
KV_REST_API_READ_ONLY_TOKEN=xxxxxxxxx

# Generate a random secret for the AUTH_SECRET: https://generate-secret.vercel.app/32 or `openssl rand -base64 32`.  
# Those variables ensure that the auth-js works in production and development environments.
# The auth-secret must contain the secret of your JWT hash 
# The auth-url must contain your callback path as in the example below.
AUTH_SECRET=xxxxxxxxx
AUTH_URL=http://localhost:3000/api/auth

# canonical url of your app
NEXT_PUBLIC_BASEURL=http://localhost:3000

# Get your Google OAuth app here: https://console.cloud.google.com/apis/credentials
NEXT_PUBLIC_GOOGLE_CLIENT_ID=xxxxxxxxx
GOOGLE_CLIENT_SECRET=xxxxxxxxx

